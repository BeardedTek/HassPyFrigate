#!/usr/bin/python
#   HassPyFrigate - Better Looking Frigate Notifications
#
#   Copyright (C) 2021  The Bearded Tek (http://www.beardedtek.com) William Kenny
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
class hasspyfrigate:
    def __init__(self):
        self.debug = False
        self.errors={}
        self.config = {}
        self.config = self.get_config()
        if self.config:
            self.event = True
        else:
            self.event = False
        try:
            if self.config['url'] != None:
                url = "http://192.168.2.245:8123/api/frigate/notifications/"
            self.clip_src=f"{url}{self.config['id']}/{self.config['camera']}/clip.mp4"
            self.snap_src=f"{url}{self.config['id']}/snapshot.jpg?bbox="
        except:
            self.error_log("Error setting up config['url'] in self.__init__")
            self.test = False
            url = "http://192.168.2.245:8123/api/frigate/notifications/"
            self.clip_src=f"{url}{self.config['id']}/{self.config['camera']}/clip.mp4"
            self.snap_src=f"{url}{self.config['id']}/snapshot.jpg?bbox="

    def load_json(self,file=None):
        import json
        with open(file) as page_json:
            return json.load(page_json)

    def error_log(self,msg):
        from sys import stderr
        if self.debug:
            stderr.write(f"{str(msg)}\n")
            print(msg)

    def get_config(self):
        import cgi
        cgi_data = cgi.FieldStorage()
        config = self.load_json('/var/www/db/json/config.json')
        if config['debug'] == "true":
            self.debug = True
        self.error_log(config)
        if cgi_data:
            ############################### FIXME ###############################
            #    * ONLY USE POST DATA, DON'T ALLOW GET!!                        #
            #    * ERROR HANDLING IF SOMETHING IS MISSING                       #
            #####################################################################
            # config['url'] : Home Assistant URL including Notification API Path
            #   (ex: http://homeassistant.local:8123/api/frigate/notifications/)
            #   **** INCLUDING TRAILING SLASH!! ****
            # config['url'] = config['url'] # This is now configured in config.json
            # config['id'] : Event ID Generated by frigate
            #   Template code for notification: 
            #       {{trigger.payload_json['after']['id']}}
            config['id'] = cgi_data.getvalue('id')
            # config['camera'] : Camera Name
            #   Template code for notification:
            #       {{trigger.payload_json['after']['camera']}}
            config['camera'] = cgi_data.getvalue('camera')
            # config['bbox'] : Show Bounding Box for snapshots
            #   "true" = "1"
            #   ANYTHING ELSE = "0"
            # THIS IS NOW CONFIGURED IN config.json
            #if cgi_data.getvalue('bbox') == "true":
            #    config['bbox'] = "1"
            #else:
            #    config['bbox'] = "0"
            # config['css'] : CSS file to use (relative path)
            config['css'] = "../css/hasspyfrigate.css"

            config['title'] = f"{config['camera']} Frigate Notification"
        self.error_log(config)
        return config


    def header(self,css="../css/hasspyfrigate.css",title="Event Viewer"):
        print("content-type: text/html\n\n")
        print(f"<html>\n<head>\n")
        #print(f'<meta name="viewport" content="width=device-width, initial-scale=1">')
        try:
            if self.config['css']:
                css = self.config['css']
            else:
                css = "../css/hasspyfrigate.css"
            if self.config['title']:
                title = self.config['title']
            else:
                title = "Event Viewer"
        except:
            self.error_log("ERROR: Setting up CSS in self.header()")
            css = "../css/hasspyfrigate.css"
        finally:
            print(f"<link rel='stylesheet' href='{css}'>")
            print(f"<title>{title}</title>\n")
            print(f"</head>\n")
            
    def clip(self):
        # Print Video Clip DIV
        print(f"<div id='clip' class='clip hidden'>\n")
        print(f"<video class='clip' controls autoloop>\n")
        print(f"<source src='{self.clip_src}' type='video/mp4'>\n")
        print(f"</video>\n")
        print(f"</div>\n")

    def snap(self):
        # Print Snapshot DIV
        print(f"<div id='snap' class='snap'>\n")
        print(f"<img class='snap' src='{self.snap_src}'>\n")
        print(f"</div>\n")

    def events(self,display="none"):
        if self.event:
            cssclass = "events hidden"
        else:
            cssclass = "events"
        disp = f"style='display: {display};'"
        print(f"<div id='events' class='{cssclass}' {disp}>")
        from hasspysqlite import hasspysqlite
        hpsql = hasspysqlite()
        hpsql.open("/var/www/db/hasspyfrigate.sqlite")
        items = hpsql.retrieve("""SELECT * FROM events ORDER BY id DESC""")
        for row in items:
            print(f"<div class='event'>\n")
            print(f"<a href='?id={row[1]}&camera={row[3]}&url={row[2]}&time=&css=../css/frigate.css'>")
            print(f"<img class='event_img' src='{row[2]}{row[1]}/snapshot.jpg?h=100&quality=10&bbox={row[5]}'>")
            print(f"</a>")
            print(f"<div class='event_text'>\n")
            print(f"{row[3].capitalize()}: {row[4].capitalize()} detected")
            print(f"</div>")
            print(f"</div>\n")
        print(f"</div>\n")
        print(f"</div>")

    def menu(self):
        print("<div class='menu'>")
        buttons = self.load_json('/var/www/db/json/menu.json')
        for button in buttons:
            if self.event != "false" or button == "events":
                field = buttons[button]
                menu_item = f'<div id="menu_{button}" class="menu_item" onclick="'
                onclick=""
                for index in field:
                    val = field[index]
                    if index != 'title':
                        if index == "events":
                            if val == "hide":
                                display = "none"
                            else:
                                display = "flex"
                            onclick += f"document.getElementById('{index}').style.display = '{display}';"
                        else:
                            if val == "hide":
                                class_name = f"{index} hidden"
                            else:
                                class_name = f"{index}"
                            onclick += f"document.getElementById('{index}').className = '{class_name}';"
                    else:
                        title = val
                menu_item += f'{onclick}">{title}</div>\n'
                print(menu_item)
        print("</div>")
        #print(f"<div class='menu'>\n")
        #snap = f"document.getElementById('clip').className = 'clip hidden';"
        #snap += f"document.getElementById('snap').className = 'snap';"
        #print(f'<div id="menu_snap" class="menu_item selected" onClick="{showsnap}">Snapshot</div>\n')
        #onclick = f"document.getElementById('clip').className = 'clip';"
        #onclick += f"document.getElementById('snap').className = 'snap hidden';"
        #print(f'<div id="menu_clip" class="menu_item" href="#" onClick="{onclick}">Video Clip</div>\n')
        #print("</div>\n")

    def footer(self):
        print(f"</div>\n</body>\n</html>\n")

    def display(self):
        self.header()
        print(f"<body class='frigate'>\n")
        print(f"<div class='container'>\n")
        self.menu()
        print(f"<div class='thisevent'>\n")
        if self.config['id'] == "none":
            print(f"</div>\n")
            self.events("flex")
        else:
            self.clip()
            self.snap()
            print(f"</div>\n")
            self.events("none")
        
        print(f"</div>\n")
        print(f"</body>\n")
        self.footer()

    def output(self):
        import json
        if self.config == False:
            self.errors['output'] = {"code": 2, "msg": "no output was generated"}
        if self.errors == True:
            self.error_log(json.dumps(self.errors,indent=2))
        self.display()

def main():
    hpf = hasspyfrigate()
    hpf.output()
#    hpf.menu()

main()
