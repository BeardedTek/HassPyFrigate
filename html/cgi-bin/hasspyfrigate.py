#!/usr/bin/python
#   HassPyFrigate - Python 3 Class displaying Frigate Notifications
#   Copyright (C) 2021  The Bearded Tek (http://www.beardedtek.com) William Kenny
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.

class hasspyfrigate:
    def __init__(self):
        self.errors={}
        self.config = {}
        self.config = self.get_config()

    def get_config(self):
        import cgi
        cgi_data = cgi.FieldStorage()
        if cgi_data:
            config={}
            # config['url'] : Home Assistant URL including Notification API Path
            #   (ex: http://homeassistant.local:8123/api/frigate/notifications/)
            #   **** INCLUDING TRAILING SLASH!! ****
            config['url'] = cgi_data.getvalue('url') 
            # config['id'] : Event ID Generated by frigate
            #   Template code for notification: 
            #       {{trigger.payload_json['after']['id']}}
            config['id'] = cgi_data.getvalue('id')
            # config['camera'] : Camera Name
            #   Template code for notification:
            #       {{trigger.payload_json['after']['camera']}}
            config['camera'] = cgi_data.getvalue('camera')
            # config['bbox'] : Show Bounding Box for snapshots
            #   "true" = "1"
            #   ANYTHING ELSE = "0"
            if cgi_data.getvalue('bbox') == "true":
                config['bbox'] = "1"
            else:
                config['bbox'] = "0"
            # config['css'] : CSS file to use (relative path)
            config['css'] = cgi_data.getvalue('css')
            from datetime import datetime
            if cgi_data.getvalue('timestamp'):
                config['time'] = datetime.fromtimestamp(cgi_data.getvalue('timestamp'))
            else:
                config['time'] = ""
            config['title'] = f"{config['camera']} Frigate Notification {config['time']}"
            return config
        else:
            self.errors['config'] = "\{'code': 1, 'msg': 'no input!!!!'\}"

    def output(self):
        import json
        if self.config == False:
            self.errors['output'] = {"code": 2, "msg": "no output was generated"}
        if self.errors == True:
            return json.dumps(self.errors,indent=2)
        else:
            self.header()
            self.display()
            self.footer()

    def display(self):
        clip_src=f"{self.config['url']}{self.config['id']}/{self.config['camera']}/clip.mp4"
        snap_src=f"{self.config['url']}{self.config['id']}/snapshot.jpg?bbox="
        # Print Video Clip DIV
        print(f"<div id='clip' class='clip hidden'>\n")
        print(f"<video class='clip' controls>\n")
        print(f"<source src='{clip_src}' type='video/mp4'>\n")
        print(f"</video>\n")
        print(f"</div>\n")

        # Print Snapshot DIV
        print(f"<div id='snap' class='snap'>\n")
        print(f"<img class='snap' src='{snap_src}'>\n")
        print(f"</div>\n")

    def onclick(self):
        onclick = f"document.getElementById('clip').className = 'clip hidden';"
        onclick += f"document.getElementById('snap').className = 'snap';"
        link=f'<div id="menu_snap" class="menu_item selected" onClick="{onclick}">Snapshot</div> \n'
        onclick = f"document.getElementById('clip').className = 'clip';"
        onclick += f"document.getElementById('snap').className = 'snap hidden';"
        link+=f'<div id="menu_clip" class="menu_item" href="#" onClick="{onclick}">Video Clip</div> \n'
        return link

    def header(self):
        print("content-type: text/html\n\n")
        print(f"<html>\n<head>\n")
        if self.config['css']:
            print(f"<link rel='stylesheet' href='{self.config['css']}'>")
        if self.config['title']:
            print(f"<title>{self.config['title']}</title>\n")
        print(f"</head>\n")
        print(f"<body class='frigate'>\n")
        print(f"<div class='container'>\n")
        print(f"<div class='menu'>\n{self.onclick()}\n</div>\n")
        
    
    def footer(self):
        print(f"</div>\n</body>\n</html>\n")

def main():
    hpf = hasspyfrigate()
    hpf.output()

main()